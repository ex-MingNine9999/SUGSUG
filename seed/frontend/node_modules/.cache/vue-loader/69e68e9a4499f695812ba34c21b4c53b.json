{"remainingRequest":"/Users/ming._.nine9/SW/seed/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ming._.nine9/SW/seed/frontend/src/pages/Presentation.vue?vue&type=template&id=1282d684&scoped=true&","dependencies":[{"path":"/Users/ming._.nine9/SW/seed/frontend/src/pages/Presentation.vue","mtime":1604224559000},{"path":"/Users/ming._.nine9/SW/seed/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ming._.nine9/SW/seed/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/ming._.nine9/SW/seed/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ming._.nine9/SW/seed/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}