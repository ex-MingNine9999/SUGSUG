{"remainingRequest":"/Users/ming._.nine9/SW/seed/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ming._.nine9/SW/seed/frontend/src/pages/sections/Features.vue?vue&type=template&id=de4817be&","dependencies":[{"path":"/Users/ming._.nine9/SW/seed/frontend/src/pages/sections/Features.vue","mtime":1604224559000},{"path":"/Users/ming._.nine9/SW/seed/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ming._.nine9/SW/seed/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/ming._.nine9/SW/seed/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ming._.nine9/SW/seed/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}