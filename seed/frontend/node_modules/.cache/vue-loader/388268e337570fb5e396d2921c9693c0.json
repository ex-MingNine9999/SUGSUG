{"remainingRequest":"/Users/ming._.nine9/SW/seed/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/ming._.nine9/SW/seed/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ming._.nine9/SW/seed/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ming._.nine9/SW/seed/frontend/src/pages/example-pages/CorpPage.vue?vue&type=template&id=43f14baa&","dependencies":[{"path":"/Users/ming._.nine9/SW/seed/frontend/src/pages/example-pages/CorpPage.vue","mtime":1604952413199},{"path":"/Users/ming._.nine9/SW/seed/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ming._.nine9/SW/seed/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/ming._.nine9/SW/seed/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ming._.nine9/SW/seed/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAid3JhcHBlciBibG9nLXBvc3QiIH0sIFsKICAgIF9jKAogICAgICAiZGl2IiwKICAgICAgeyBzdGF0aWNDbGFzczogInBhZ2UtaGVhZGVyIHBhZ2UtaGVhZGVyLXNtYWxsIiB9LAogICAgICBbCiAgICAgICAgX2MoInBhcmFsbGF4IiwgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJwYWdlLWhlYWRlci1pbWFnZSIsCiAgICAgICAgICBzdGF0aWNTdHlsZTogeyAiYmFja2dyb3VuZC1pbWFnZSI6ICJ1cmwoJ2ltZy9iZzMyLmpwZycpIiB9CiAgICAgICAgfSksCiAgICAgICAgX3ZtLl9tKDApCiAgICAgIF0sCiAgICAgIDEKICAgICksCiAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInNlY3Rpb24iIH0sIFsKICAgICAgX3ZtLl9tKDEpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInNlY3Rpb24iIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljU3R5bGU6IHsgZmxvYXQ6ICJsZWZ0Iiwgd2lkdGg6ICI5JSIgfSB9KSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgeyBzdGF0aWNTdHlsZTogeyBmbG9hdDogImxlZnQiLCB3aWR0aDogIjI1JSIsIHBhZGRpbmc6ICI5cHgiIH0gfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICBhdHRyczogeyBzbG90OiAiaW1hZ2UiLCBzcmM6IF92bS5jb3JwQmFzZURhdGEubG9nbyB9LAogICAgICAgICAgICAgICAgICBzbG90OiAiaW1hZ2UiCiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgeyBzdGF0aWNTdHlsZTogeyBmbG9hdDogImxlZnQiLCB3aWR0aDogIjUwJSIsIHBhZGRpbmc6ICIxMHB4IiB9IH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoImgyIiwgeyBzdGF0aWNDbGFzczogInRpdGxlIiB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLmNvcnBCYXNlRGF0YS5zX25hbWUpKQogICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgQ0VPIDogIiArIF92bS5fcyhfdm0uY29ycERldGFpbERhdGEuY2VvKSksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBIb21lUGFnZSA6ICIgKyBfdm0uX3MoX3ZtLmNvcnBEZXRhaWxEYXRhLmhvbWVwYWdlKSksCiAgICAgICAgICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgICAgICAgICBfdm0uX3YoIiBQaG9uZSA6ICIgKyBfdm0uX3MoX3ZtLmNvcnBCYXNlRGF0YS5waG9uZSkpLAogICAgICAgICAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgICAgICAgICAgX3ZtLl92KCIgQWRkcmVzcyA6ICIgKyBfdm0uX3MoX3ZtLmNvcnBEZXRhaWxEYXRhLmFkZHJlc3MpKSwKICAgICAgICAgICAgICAgICAgX2MoImJyIikKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAic2VjdGlvbiBzZWN0aW9uLWJsb2cgY29sLW1kLTEwIG1sLWF1dG8gbXItYXV0byIgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGFsaWduOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KCLrjIDtkZwg7ISc67mE7IqkIikKICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIiIH0sIFsKICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzZWN0aW9uLXN0b3J5LW92ZXJ2aWV3IiB9LCBbCiAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTEiIH0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtNSIgfSwgWwogICAgICAgICAgICAgICAgICAgICAgICBfYygiaDMiLCBbX3ZtLl92KF92bS5fcyhfdm0uY29ycERldGFpbERhdGEucHJvZHVjdCkpXSksCiAgICAgICAgICAgICAgICAgICAgICAgIF9jKCJwIiwgWwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICIg67aE7JW8IDogIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fcyhfdm0uY29ycERldGFpbERhdGEudGVjaG5vbG9neSkgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiICIKICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAiIOyEnOu5hOyKpCA6ICIgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MoX3ZtLmNvcnBEZXRhaWxEYXRhLnNlcnZpY2UpICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiKQogICAgICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZC0xIiB9KSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTQiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoImRpdiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImltYWdlLWNvbnRhaW5lciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICJiYWNrZ3JvdW5kLWltYWdlIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInVybCgiICsgX3ZtLmNvcnBEZXRhaWxEYXRhLmljb24gKyAiKSIKICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtMTAgbWwtYXV0byBtci1hdXRvIiB9LCBbCiAgICAgICAgICAgICAgX2MoInAiLCB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJsb2NrcXVvdGUgYmxvY2txdW90ZS1wcmltYXJ5IiwKICAgICAgICAgICAgICAgIGRvbVByb3BzOiB7IGlubmVySFRNTDogX3ZtLl9zKF92bS5jb3JwRGV0YWlsRGF0YS5pbnRyb2R1Y3Rpb24pIH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJzZWN0aW9uIiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtNSBtbC1hdXRvIG1yLWF1dG8iIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX3ZtLmxvYWRlZAogICAgICAgICAgICAgICAgICA/IF9jKCJMaW5lQ2hhcnQiLCB7IGF0dHJzOiB7IGNoYXJ0RGF0YTogX3ZtLnNhbGVzIH0gfSkKICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgICAgICAgIF92bS5jb3JwWWVhckRhdGEuc2FsZXNbX3ZtLmNvcnBMZW5ndGggLSAxXSAvIDEwMDAwID4gMQogICAgICAgICAgICAgICAgICA/IF9jKCJoNSIsIHsgYXR0cnM6IHsgYWxpZ246ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MoX3ZtLmNvcnBZZWFyRGF0YS55ZWFyW192bS5jb3JwTGVuZ3RoIC0gMV0pICsKICAgICAgICAgICAgICAgICAgICAgICAgICAi64WEIOq4sOykgCAiICsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLmZsb29yKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uY29ycFllYXJEYXRhLnNhbGVzW192bS5jb3JwTGVuZ3RoIC0gMV0gLyAxMDAwMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICkgKwogICAgICAgICAgICAgICAgICAgICAgICAgICLslrUgIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmNvcnBZZWFyRGF0YS5zYWxlc1tfdm0uY29ycExlbmd0aCAtIDFdICUgMTAwMDAKICAgICAgICAgICAgICAgICAgICAgICAgICApICsKICAgICAgICAgICAgICAgICAgICAgICAgICAi66eM7JuQIgogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIDogX2MoImg1IiwgeyBhdHRyczogeyBhbGlnbjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fcyhfdm0uY29ycFllYXJEYXRhLnllYXJbX3ZtLmNvcnBMZW5ndGggLSAxXSkgKwogICAgICAgICAgICAgICAgICAgICAgICAgICLrhYQg6riw7KSAICIgKwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fcyhfdm0uY29ycFllYXJEYXRhLnNhbGVzW192bS5jb3JwTGVuZ3RoIC0gMV0pICsKICAgICAgICAgICAgICAgICAgICAgICAgICAi66eM7JuQIgogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtNSBtbC1hdXRvIG1yLWF1dG8iIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX3ZtLmxvYWRlZAogICAgICAgICAgICAgICAgICA/IF9jKCJMaW5lQ2hhcnQiLCB7IGF0dHJzOiB7IGNoYXJ0RGF0YTogX3ZtLmludmVzdG1lbnQgfSB9KQogICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgX3ZtLmNvcnBZZWFyRGF0YS5pbnZlc3RtZW50W192bS5jb3JwTGVuZ3RoIC0gMV0gLyAxMDAwMCA+IDEKICAgICAgICAgICAgICAgICAgPyBfYygiaDUiLCB7IGF0dHJzOiB7IGFsaWduOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKF92bS5jb3JwWWVhckRhdGEueWVhcltfdm0uY29ycExlbmd0aCAtIDFdKSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgIuuFhCDquLDspIAgIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5mbG9vcigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmNvcnBZZWFyRGF0YS5pbnZlc3RtZW50W192bS5jb3JwTGVuZ3RoIC0gMV0gLwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEwMDAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgICAgICAgKSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgIuyWtSAiICsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uY29ycFllYXJEYXRhLmludmVzdG1lbnRbX3ZtLmNvcnBMZW5ndGggLSAxXSAlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEwMDAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgKSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgIuunjOybkCIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICA6IF9jKCJoNSIsIHsgYXR0cnM6IHsgYWxpZ246ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MoX3ZtLmNvcnBZZWFyRGF0YS55ZWFyW192bS5jb3JwTGVuZ3RoIC0gMV0pICsKICAgICAgICAgICAgICAgICAgICAgICAgICAi64WEIOq4sOykgCAiICsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uY29ycFllYXJEYXRhLmludmVzdG1lbnRbX3ZtLmNvcnBMZW5ndGggLSAxXQogICAgICAgICAgICAgICAgICAgICAgICAgICkgKwogICAgICAgICAgICAgICAgICAgICAgICAgICLrp4zsm5AiCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTUgbWwtYXV0byBtci1hdXRvIiB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF92bS5sb2FkZWQKICAgICAgICAgICAgICAgICAgPyBfYygiTGluZUNoYXJ0IiwgeyBhdHRyczogeyAiY2hhcnQtZGF0YSI6IF92bS50b3RhbCB9IH0pCiAgICAgICAgICAgICAgICAgIDogX3ZtLl9lKCksCiAgICAgICAgICAgICAgICBfdm0uY29ycFllYXJEYXRhLnRvdGFsW192bS5jb3JwTGVuZ3RoIC0gMV0gLyAxMDAwMCA+IDEKICAgICAgICAgICAgICAgICAgPyBfYygiaDUiLCB7IGF0dHJzOiB7IGFsaWduOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKF92bS5jb3JwWWVhckRhdGEueWVhcltfdm0uY29ycExlbmd0aCAtIDFdKSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgIuuFhCDquLDspIAgIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5mbG9vcigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmNvcnBZZWFyRGF0YS50b3RhbFtfdm0uY29ycExlbmd0aCAtIDFdIC8gMTAwMDAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICAgICAgICApICsKICAgICAgICAgICAgICAgICAgICAgICAgICAi7Ja1ICIgKwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fcygKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5jb3JwWWVhckRhdGEudG90YWxbX3ZtLmNvcnBMZW5ndGggLSAxXSAlIDEwMDAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgKSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgIuunjOybkCIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICA6IF9jKCJoNSIsIHsgYXR0cnM6IHsgYWxpZ246ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MoX3ZtLmNvcnBZZWFyRGF0YS55ZWFyW192bS5jb3JwTGVuZ3RoIC0gMV0pICsKICAgICAgICAgICAgICAgICAgICAgICAgICAi64WEIOq4sOykgCAiICsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MoX3ZtLmNvcnBZZWFyRGF0YS50b3RhbFtfdm0uY29ycExlbmd0aCAtIDFdKSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgIuunjOybkCIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTUgbWwtYXV0byBtci1hdXRvIiB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF92bS5sb2FkZWQKICAgICAgICAgICAgICAgICAgPyBfYygiTGluZUNoYXJ0IiwgeyBhdHRyczogeyAiY2hhcnQtZGF0YSI6IF92bS5wcm9maXQgfSB9KQogICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgX3ZtLmNvcnBZZWFyRGF0YS5wcm9maXRbX3ZtLmNvcnBMZW5ndGggLSAxXSAvIDEwMDAwID4gMQogICAgICAgICAgICAgICAgICA/IF9jKCJoNSIsIHsgYXR0cnM6IHsgYWxpZ246ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MoX3ZtLmNvcnBZZWFyRGF0YS55ZWFyW192bS5jb3JwTGVuZ3RoIC0gMV0pICsKICAgICAgICAgICAgICAgICAgICAgICAgICAi64WEIOq4sOykgCAiICsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLmZsb29yKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uY29ycFllYXJEYXRhLnByb2ZpdFtfdm0uY29ycExlbmd0aCAtIDFdIC8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMDAwMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICkgKwogICAgICAgICAgICAgICAgICAgICAgICAgICLslrUgIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmNvcnBZZWFyRGF0YS5wcm9maXRbX3ZtLmNvcnBMZW5ndGggLSAxXSAlIDEwMDAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgKSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgIuunjOybkCIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICA6IF9jKCJoNSIsIHsgYXR0cnM6IHsgYWxpZ246ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MoX3ZtLmNvcnBZZWFyRGF0YS55ZWFyW192bS5jb3JwTGVuZ3RoIC0gMV0pICsKICAgICAgICAgICAgICAgICAgICAgICAgICAi64WEIOq4sOykgCAiICsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MoX3ZtLmNvcnBZZWFyRGF0YS5wcm9maXRbX3ZtLmNvcnBMZW5ndGggLSAxXSkgKwogICAgICAgICAgICAgICAgICAgICAgICAgICLrp4zsm5AiCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTUgbWwtYXV0byBtci1hdXRvIiB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF92bS5sb2FkZWQKICAgICAgICAgICAgICAgICAgPyBfYygiTGluZUNoYXJ0IiwgeyBhdHRyczogeyAiY2hhcnQtZGF0YSI6IF92bS5jYXBpdGFsIH0gfSkKICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKSwKICAgICAgICAgICAgICAgIF92bS5jb3JwWWVhckRhdGEuY2FwaXRhbFtfdm0uY29ycExlbmd0aCAtIDFdIC8gMTAwMDAgPiAxCiAgICAgICAgICAgICAgICAgID8gX2MoImg1IiwgeyBhdHRyczogeyBhbGlnbjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fcyhfdm0uY29ycFllYXJEYXRhLnllYXJbX3ZtLmNvcnBMZW5ndGggLSAxXSkgKwogICAgICAgICAgICAgICAgICAgICAgICAgICLrhYQg6riw7KSAICIgKwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fcygKICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguZmxvb3IoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5jb3JwWWVhckRhdGEuY2FwaXRhbFtfdm0uY29ycExlbmd0aCAtIDFdIC8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMDAwMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICkgKwogICAgICAgICAgICAgICAgICAgICAgICAgICLslrUgIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmNvcnBZZWFyRGF0YS5jYXBpdGFsW192bS5jb3JwTGVuZ3RoIC0gMV0gJSAxMDAwMAogICAgICAgICAgICAgICAgICAgICAgICAgICkgKwogICAgICAgICAgICAgICAgICAgICAgICAgICLrp4zsm5AiCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgOiBfYygiaDUiLCB7IGF0dHJzOiB7IGFsaWduOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKF92bS5jb3JwWWVhckRhdGEueWVhcltfdm0uY29ycExlbmd0aCAtIDFdKSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgIuuFhCDquLDspIAgIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKF92bS5jb3JwWWVhckRhdGEuY2FwaXRhbFtfdm0uY29ycExlbmd0aCAtIDFdKSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgIuunjOybkCIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTUgbWwtYXV0byBtci1hdXRvIiB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF92bS5sb2FkZWQKICAgICAgICAgICAgICAgICAgPyBfYygiTGluZUNoYXJ0IiwgewogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgImNoYXJ0LWRhdGEiOiBfdm0ucGFpZENhcGl0YWwgfQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIDogX3ZtLl9lKCksCiAgICAgICAgICAgICAgICBfdm0uY29ycFllYXJEYXRhLnBhaWRDYXBpdGFsW192bS5jb3JwTGVuZ3RoIC0gMV0gLyAxMDAwMCA+IDEKICAgICAgICAgICAgICAgICAgPyBfYygiaDUiLCB7IGF0dHJzOiB7IGFsaWduOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKF92bS5jb3JwWWVhckRhdGEueWVhcltfdm0uY29ycExlbmd0aCAtIDFdKSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgIuuFhCDquLDspIAgIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5mbG9vcigKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmNvcnBZZWFyRGF0YS5wYWlkQ2FwaXRhbFtfdm0uY29ycExlbmd0aCAtIDFdIC8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMDAwMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICkgKwogICAgICAgICAgICAgICAgICAgICAgICAgICLslrUgIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmNvcnBZZWFyRGF0YS5wYWlkQ2FwaXRhbFtfdm0uY29ycExlbmd0aCAtIDFdICUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTAwMDAKICAgICAgICAgICAgICAgICAgICAgICAgICApICsKICAgICAgICAgICAgICAgICAgICAgICAgICAi66eM7JuQIgogICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgIDogX2MoImg1IiwgeyBhdHRyczogeyBhbGlnbjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fcyhfdm0uY29ycFllYXJEYXRhLnllYXJbX3ZtLmNvcnBMZW5ndGggLSAxXSkgKwogICAgICAgICAgICAgICAgICAgICAgICAgICLrhYQg6riw7KSAICIgKwogICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fcygKICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5jb3JwWWVhckRhdGEucGFpZENhcGl0YWxbX3ZtLmNvcnBMZW5ndGggLSAxXQogICAgICAgICAgICAgICAgICAgICAgICAgICkgKwogICAgICAgICAgICAgICAgICAgICAgICAgICLrp4zsm5AiCiAgICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTUgbWwtYXV0byBtci1hdXRvIiB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF92bS5sb2FkZWQKICAgICAgICAgICAgICAgICAgPyBfYygiTGluZUNoYXJ0IiwgeyBhdHRyczogeyAiY2hhcnQtZGF0YSI6IF92bS5jdXJJbmNvbWUgfSB9KQogICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgX3ZtLmNvcnBZZWFyRGF0YS5jdXJJbmNvbWVbX3ZtLmNvcnBMZW5ndGggLSAxXSAvIDEwMDAwID4gMQogICAgICAgICAgICAgICAgICA/IF9jKCJoNSIsIHsgYXR0cnM6IHsgYWxpZ246ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MoX3ZtLmNvcnBZZWFyRGF0YS55ZWFyW192bS5jb3JwTGVuZ3RoIC0gMV0pICsKICAgICAgICAgICAgICAgICAgICAgICAgICAi64WEIOq4sOykgCAiICsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLmZsb29yKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uY29ycFllYXJEYXRhLmN1ckluY29tZVtfdm0uY29ycExlbmd0aCAtIDFdIC8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMDAwMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgICAgICAgICAgICkgKwogICAgICAgICAgICAgICAgICAgICAgICAgICLslrUgIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLmNvcnBZZWFyRGF0YS5jdXJJbmNvbWVbX3ZtLmNvcnBMZW5ndGggLSAxXSAlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEwMDAwCiAgICAgICAgICAgICAgICAgICAgICAgICAgKSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgIuunjOybkCIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICA6IF9jKCJoNSIsIHsgYXR0cnM6IHsgYWxpZ246ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MoX3ZtLmNvcnBZZWFyRGF0YS55ZWFyW192bS5jb3JwTGVuZ3RoIC0gMV0pICsKICAgICAgICAgICAgICAgICAgICAgICAgICAi64WEIOq4sOykgCAiICsKICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uX3MoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdm0uY29ycFllYXJEYXRhLmN1ckluY29tZVtfdm0uY29ycExlbmd0aCAtIDFdCiAgICAgICAgICAgICAgICAgICAgICAgICAgKSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgIuunjOybkCIKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTUgbWwtYXV0byBtci1hdXRvIiB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF92bS5sb2FkZWQKICAgICAgICAgICAgICAgICAgPyBfYygiTGluZUNoYXJ0IiwgeyBhdHRyczogeyAiY2hhcnQtZGF0YSI6IF92bS5wZW9wbGUgfSB9KQogICAgICAgICAgICAgICAgICA6IF92bS5fZSgpLAogICAgICAgICAgICAgICAgX2MoImg1IiwgeyBhdHRyczogeyBhbGlnbjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICAgICBfdm0uX3MoX3ZtLmNvcnBZZWFyRGF0YS55ZWFyW192bS5jb3JwTGVuZ3RoIC0gMV0pICsKICAgICAgICAgICAgICAgICAgICAgICLrhYQg6riw7KSAICIgKwogICAgICAgICAgICAgICAgICAgICAgX3ZtLl9zKF92bS5jb3JwWWVhckRhdGEucGVvcGxlW192bS5jb3JwTGVuZ3RoIC0gMV0pICsKICAgICAgICAgICAgICAgICAgICAgICLrqoUiCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic2VjdGlvbiBzZWN0aW9uLWNvbW1lbnRzIiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTggbWwtYXV0byBtci1hdXRvIiB9LCBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJtZWRpYS1hcmVhIiB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiaDMiLCB7IHN0YXRpY0NsYXNzOiAidGl0bGUgdGV4dC1jZW50ZXIiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoIkNvbW1lbnRzIikKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF92bS5fbChfdm0uY29tbWVudHMsIGZ1bmN0aW9uKGNvbW1lbnQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2MoImNvbW1lbnQiLCB7CiAgICAgICAgICAgICAgICAgICAgICBrZXk6IGNvbW1lbnQuaWQsCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBhdmF0YXI6IGNvbW1lbnQuYXZhdGFyLAogICAgICAgICAgICAgICAgICAgICAgICBhdXRob3I6IGNvbW1lbnQuYXV0aG9yLAogICAgICAgICAgICAgICAgICAgICAgICBkYXRlOiBjb21tZW50LmRhdGUsCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnQ6IGNvbW1lbnQuY29tbWVudCwKICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGllczogY29tbWVudC5yZXBsaWVzCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAyCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygiaDMiLCB7IHN0YXRpY0NsYXNzOiAidGl0bGUgdGV4dC1jZW50ZXIiIH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiUG9zdCB5b3VyIGNvbW1lbnQiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWVkaWEgbWVkaWEtcG9zdCIgfSwgWwogICAgICAgICAgICAgICAgX3ZtLl9tKDIpLAogICAgICAgICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtZWRpYS1ib2R5IiB9LCBbCiAgICAgICAgICAgICAgICAgIF9jKCJ0ZXh0YXJlYSIsIHsKICAgICAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsIiwKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS5mb3JtLmNvbW1lbnQsCiAgICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJmb3JtLmNvbW1lbnQiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImZvcm0tY29udHJvbCIsCiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiV3JpdGUgYSBuaWNlIHJlcGx5IG9yIGdvIGhvbWUuLi4iLAogICAgICAgICAgICAgICAgICAgICAgcm93czogIjQiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLmZvcm0uY29tbWVudCB9LAogICAgICAgICAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykgewogICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS4kc2V0KF92bS5mb3JtLCAiY29tbWVudCIsICRldmVudC50YXJnZXQudmFsdWUpCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgX3ZtLl9tKDMpCiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKQogIF0pCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFsKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGVudC1jZW50ZXIiIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3ciIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1tZC04IG1sLWF1dG8gbXItYXV0byB0ZXh0LWNlbnRlciIgfSwgWwogICAgICAgICAgX2MoImgyIiwgeyBzdGF0aWNDbGFzczogInRpdGxlIiB9LCBbCiAgICAgICAgICAgIF92bS5fdigi7Yis7J6Q7ZWY6rOgIOyLtuydgCDquLDsl4XsnYAg7Ja065akIOq4sOyXheyduOqwgOyalD8iKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiaDQiLCBbX3ZtLl92KCJTVUdTVUfsnbQg7JGl7JGlIO2BtCDsiJgg7J6I64+E66GdIOuPhOyZgOuTnOumrOqyoOyKteuLiOuLpC4iKV0pCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicm93IiB9LCBbCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtMTIiIH0sIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiYnV0dG9uLWNvbnRhaW5lciIgfSwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidG4gYnRuLXByaW1hcnkgYnRuLXJvdW5kIGJ0bi1sZyIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3BhYmxvIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJub3ctdWktaWNvbnMgdGV4dF9hbGlnbi1sZWZ0IiB9KSwKICAgICAgICAgICAgICAgIF92bS5fdigiIO2UhOumrOuvuOyXhCDshJzruYTsiqQg67CU66Gc6rCA6riwICIpCiAgICAgICAgICAgICAgXQogICAgICAgICAgICApCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygKICAgICAgImEiLAogICAgICB7IHN0YXRpY0NsYXNzOiAicHVsbC1sZWZ0IGF1dGhvciIsIGF0dHJzOiB7IGhyZWY6ICIjcGFibG8iIH0gfSwKICAgICAgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiYXZhdGFyIiB9LCBbCiAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICBzdGF0aWNDbGFzczogIm1lZGlhLW9iamVjdCBpbWctcmFpc2VkIiwKICAgICAgICAgICAgYXR0cnM6IHsgYWx0OiAiNjR4NjQiLCBzcmM6ICJpbWcvb2xpdmlhLmpwZyIgfQogICAgICAgICAgfSkKICAgICAgICBdKQogICAgICBdCiAgICApCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibWVkaWEtZm9vdGVyIiB9LCBbCiAgICAgIF9jKAogICAgICAgICJhIiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogImJ0biBidG4tcHJpbWFyeSBwdWxsLXJpZ2h0IiwKICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjcGFibG8iIH0KICAgICAgICB9LAogICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJub3ctdWktaWNvbnMgdWktMV9zZW5kIiB9KSwgX3ZtLl92KCIgUmVwbHkgIildCiAgICAgICkKICAgIF0pCiAgfQpdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}