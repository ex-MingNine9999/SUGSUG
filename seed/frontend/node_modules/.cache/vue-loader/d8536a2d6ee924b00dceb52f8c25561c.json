{"remainingRequest":"/Users/ming._.nine9/SW/seed/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ming._.nine9/SW/seed/frontend/src/components/Navbar/Navbar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/ming._.nine9/SW/seed/frontend/src/components/Navbar/Navbar.vue","mtime":1601738044361},{"path":"/Users/ming._.nine9/SW/seed/frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ming._.nine9/SW/seed/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ming._.nine9/SW/seed/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { CollapseTransition } from 'vue2-transitions';\nimport NavbarToggleButton from './NavbarToggleButton';\nlet resizeTimeout;\nfunction resizeThrottler(actualResizeHandler) {\n  // ignore resize events as long as an actualResizeHandler execution is in the queue\n  if ( !resizeTimeout ) {\n    resizeTimeout = setTimeout(() => {\n      resizeTimeout = null;\n      actualResizeHandler();\n\n      // The actualResizeHandler will execute at a rate of 15fps\n    }, 66);\n  }\n}\n\nexport default {\n  name: 'navbar',\n  props: {\n    transparent: {\n      type: Boolean,\n      default: false\n    },\n    position: {\n      type: String,\n      default: 'relative'\n    },\n    menuClasses: {\n      type: [String, Object, Array]\n    },\n    colorOnScroll: {\n      type: Number,\n      default: 0\n    },\n    type: {\n      type: String,\n      default: 'white',\n      validator(value) {\n        return ['white', 'default', 'primary', 'danger', 'success', 'warning', 'info'].includes(value);\n      }\n    },\n  },\n  provide() {\n    return {\n      closeNavbar: this.close\n    }\n  },\n  components: {\n    CollapseTransition,\n    NavbarToggleButton\n  },\n  data() {\n    return {\n      showMenu: false,\n      extraNavClasses: '',\n      currentScrollValue: 0\n    }\n  },\n  computed: {\n    slotData(){\n      return {\n        toggle: this.toggle,\n        open: this.open,\n        close: this.close,\n        isToggled: this.showMenu\n      }\n    },\n    classes() {\n      let color = `bg-${this.type}`;\n      let navPosition = `navbar-${this.position}`;\n      let colorOnScrollTransparent = this.colorOnScroll && this.currentScrollValue < this.colorOnScroll;\n\n      if (this.position === 'fixed') {\n        navPosition = 'fixed-top';\n      }\n\n      return [\n        { 'navbar-transparent': (this.transparent || colorOnScrollTransparent) },\n        { [color]: (!this.transparent && this.colorOnScroll === 0) },\n        navPosition, this.extraNavClasses]\n    }\n  },\n  methods: {\n    setNav(value){\n      let docClasess = document.body.classList;\n      if(value){\n        docClasess.add('nav-open')\n      } else {\n        docClasess.remove('nav-open')\n      }\n      let isOpen = docClasess.contains('nav-open');\n      let eventToTrigger = isOpen ? 'open' : 'close';\n      this.showMenu = isOpen;\n      this.$emit(eventToTrigger)\n    },\n    toggle() {\n      this.setNav(!this.showMenu)\n    },\n    open(){\n      this.setNav(true);\n    },\n    close(){\n      if (this.showMenu === false) {\n        return\n      }\n      this.setNav(false);\n    },\n    handleScroll(){\n      let scrollValue = document.body.scrollTop || document.documentElement.scrollTop;\n      this.currentScrollValue = scrollValue;\n      if(this.colorOnScroll > 0 && scrollValue > this.colorOnScroll){\n        this.extraNavClasses = `bg-${this.type}`;\n      } else {\n        if(this.extraNavClasses){\n          this.extraNavClasses = ''\n        }\n      }\n    },\n    scrollListener() {\n      resizeThrottler(this.handleScroll)\n    }\n  },\n  mounted () {\n    document.addEventListener('scroll', this.scrollListener)\n  },\n  beforeDestroy () {\n    document.removeEventListener('scroll', this.scrollListener)\n  }\n}\n",{"version":3,"sources":["Navbar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmfile":"Navbar.vue","sourceRoot":"src/components/Navbar","sourcesContent":["<template>\n    <nav :class=\"classes\" class=\"navbar navbar-expand-lg\">\n        <div class=\"container\">\n            <div class=\"navbar-translate\">\n                <slot v-bind=\"slotData\"></slot>\n                <navbar-toggle-button :toggled=\"showMenu\" @click.native.stop=\"toggle\"></navbar-toggle-button>\n            </div>\n            <div class=\"collapse navbar-collapse show\"\n                 v-if=\"$slots['navbar-menu'] || $scopedSlots['navbar-menu']\"\n                 data-color=\"orange\"\n                 id=\"navigation\">\n                <ul class=\"navbar-nav\" :class=\"menuClasses\" v-click-outside=\"close\">\n                    <slot name=\"navbar-menu\" v-bind=\"slotData\"></slot>\n                </ul>\n            </div>\n        </div>\n    </nav>\n</template>\n<script>\n  import { CollapseTransition } from 'vue2-transitions';\n  import NavbarToggleButton from './NavbarToggleButton';\n  let resizeTimeout;\n  function resizeThrottler(actualResizeHandler) {\n    // ignore resize events as long as an actualResizeHandler execution is in the queue\n    if ( !resizeTimeout ) {\n      resizeTimeout = setTimeout(() => {\n        resizeTimeout = null;\n        actualResizeHandler();\n\n        // The actualResizeHandler will execute at a rate of 15fps\n      }, 66);\n    }\n  }\n\n  export default {\n    name: 'navbar',\n    props: {\n      transparent: {\n        type: Boolean,\n        default: false\n      },\n      position: {\n        type: String,\n        default: 'relative'\n      },\n      menuClasses: {\n        type: [String, Object, Array]\n      },\n      colorOnScroll: {\n        type: Number,\n        default: 0\n      },\n      type: {\n        type: String,\n        default: 'white',\n        validator(value) {\n          return ['white', 'default', 'primary', 'danger', 'success', 'warning', 'info'].includes(value);\n        }\n      },\n    },\n    provide() {\n      return {\n        closeNavbar: this.close\n      }\n    },\n    components: {\n      CollapseTransition,\n      NavbarToggleButton\n    },\n    data() {\n      return {\n        showMenu: false,\n        extraNavClasses: '',\n        currentScrollValue: 0\n      }\n    },\n    computed: {\n      slotData(){\n        return {\n          toggle: this.toggle,\n          open: this.open,\n          close: this.close,\n          isToggled: this.showMenu\n        }\n      },\n      classes() {\n        let color = `bg-${this.type}`;\n        let navPosition = `navbar-${this.position}`;\n        let colorOnScrollTransparent = this.colorOnScroll && this.currentScrollValue < this.colorOnScroll;\n\n        if (this.position === 'fixed') {\n          navPosition = 'fixed-top';\n        }\n\n        return [\n          { 'navbar-transparent': (this.transparent || colorOnScrollTransparent) },\n          { [color]: (!this.transparent && this.colorOnScroll === 0) },\n          navPosition, this.extraNavClasses]\n      }\n    },\n    methods: {\n      setNav(value){\n        let docClasess = document.body.classList;\n        if(value){\n          docClasess.add('nav-open')\n        } else {\n          docClasess.remove('nav-open')\n        }\n        let isOpen = docClasess.contains('nav-open');\n        let eventToTrigger = isOpen ? 'open' : 'close';\n        this.showMenu = isOpen;\n        this.$emit(eventToTrigger)\n      },\n      toggle() {\n        this.setNav(!this.showMenu)\n      },\n      open(){\n        this.setNav(true);\n      },\n      close(){\n        if (this.showMenu === false) {\n          return\n        }\n        this.setNav(false);\n      },\n      handleScroll(){\n        let scrollValue = document.body.scrollTop || document.documentElement.scrollTop;\n        this.currentScrollValue = scrollValue;\n        if(this.colorOnScroll > 0 && scrollValue > this.colorOnScroll){\n          this.extraNavClasses = `bg-${this.type}`;\n        } else {\n          if(this.extraNavClasses){\n            this.extraNavClasses = ''\n          }\n        }\n      },\n      scrollListener() {\n        resizeThrottler(this.handleScroll)\n      }\n    },\n    mounted () {\n      document.addEventListener('scroll', this.scrollListener)\n    },\n    beforeDestroy () {\n      document.removeEventListener('scroll', this.scrollListener)\n    }\n  }\n</script>\n<style>\n</style>\n"]}]}