{"remainingRequest":"/Users/ming._.nine9/SW/seed/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/ming._.nine9/SW/seed/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ming._.nine9/SW/seed/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/ming._.nine9/SW/seed/frontend/src/pages/Presentation.vue?vue&type=template&id=1282d684&scoped=true&","dependencies":[{"path":"/Users/ming._.nine9/SW/seed/frontend/src/pages/Presentation.vue","mtime":1604224559000},{"path":"/Users/ming._.nine9/SW/seed/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ming._.nine9/SW/seed/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/ming._.nine9/SW/seed/frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ming._.nine9/SW/seed/frontend/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { staticClass: "wrapper presentation-page" }, [
    _c("div", { staticClass: "page-header clear-filter" }, [
      _c(
        "div",
        { staticClass: "rellax-header rellax-header-sky" },
        [
          _c("parallax", {
            staticClass: "page-header-image",
            staticStyle: {
              "background-image":
                "url('img/presentation-page/nuk-pro-back-sky.jpg')"
            }
          })
        ],
        1
      ),
      _c(
        "div",
        {
          staticClass: "rellax-header rellax-header-buildings",
          attrs: { "data-rellax-speed": "0" }
        },
        [
          _c("parallax", {
            staticClass: "page-header-image page-header-city",
            staticStyle: {
              "background-image":
                "url('img/presentation-page/nuk-pro-buildings.png')"
            }
          })
        ],
        1
      ),
      _vm._m(0),
      _c(
        "h3",
        {
          staticClass: "h3-description rellax-text",
          attrs: { "data-rellax-speed": "-1" }
        },
        [_vm._v("StartUp Grade, Start UpGrade")]
      ),
      _c(
        "h6",
        {
          staticClass: "category category-absolute rellax-text",
          attrs: { "data-rellax-speed": "-2" }
        },
        [
          _c("parallax", [
            _vm._v(" Designed by "),
            _c(
              "a",
              {
                attrs: { href: "https:///invisionapp.com/", target: "_blank" }
              },
              [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/invision-white-slim.png",
                      expression: "'img/invision-white-slim.png'"
                    }
                  ],
                  staticClass: "invision-logo",
                  attrs: { alt: "" }
                })
              ]
            ),
            _vm._v(". Coded by "),
            _c(
              "a",
              {
                attrs: {
                  href: "https://www.creative-tim.com",
                  target: "_blank"
                }
              },
              [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/creative-tim-white-slim2.png",
                      expression: "'img/creative-tim-white-slim2.png'"
                    }
                  ],
                  staticClass: "creative-tim-logo",
                  attrs: { alt: "" }
                })
              ]
            ),
            _vm._v(". ")
          ])
        ],
        1
      )
    ]),
    _c(
      "div",
      {
        staticClass: "section section-components",
        attrs: { "data-background-color": "dark-red" }
      },
      [
        _c("div", { staticClass: "container" }, [
          _vm._m(1),
          _c("div", { staticClass: "row" }, [
            _c("div", { staticClass: "col-md-3" }, [
              _c("div", { staticClass: "card-container first-card" }, [
                _c("div", { staticClass: "card-component" }, [
                  _c(
                    "a",
                    {
                      attrs: {
                        href: "index.html#basic-elements",
                        target: "_blank"
                      }
                    },
                    [
                      _c("div", { staticClass: "front" }, [
                        _c("img", {
                          directives: [
                            {
                              name: "lazy",
                              rawName: "v-lazy",
                              value: "img/presentation-page/basic_thumb.jpg",
                              expression:
                                "'img/presentation-page/basic_thumb.jpg'"
                            }
                          ],
                          attrs: { alt: "basic_thumb" }
                        })
                      ])
                    ]
                  )
                ])
              ])
            ]),
            _c("div", { staticClass: "col-md-3" }, [
              _c("div", { staticClass: "card-container second-card" }, [
                _c("div", { staticClass: "card-component" }, [
                  _c(
                    "a",
                    { attrs: { href: "index.html#cards", target: "_blank" } },
                    [
                      _c("div", { staticClass: "front" }, [
                        _c("img", {
                          directives: [
                            {
                              name: "lazy",
                              rawName: "v-lazy",
                              value: "img/presentation-page/cards_thumb.jpg",
                              expression:
                                "'img/presentation-page/cards_thumb.jpg'"
                            }
                          ],
                          attrs: { alt: "cards_thumb" }
                        })
                      ])
                    ]
                  )
                ])
              ])
            ]),
            _c("div", { staticClass: "col-md-3" }, [
              _c("div", { staticClass: "card-container third-card" }, [
                _c("div", { staticClass: "card-component" }, [
                  _c(
                    "a",
                    { attrs: { href: "sections.html", target: "_blank" } },
                    [
                      _c("div", { staticClass: "front" }, [
                        _c("img", {
                          directives: [
                            {
                              name: "lazy",
                              rawName: "v-lazy",
                              value: "img/presentation-page/sections_thumb.jpg",
                              expression:
                                "'img/presentation-page/sections_thumb.jpg'"
                            }
                          ],
                          attrs: { alt: "sections_thumb" }
                        })
                      ])
                    ]
                  )
                ])
              ])
            ]),
            _c("div", { staticClass: "col-md-3" }, [
              _c("div", { staticClass: "card-container fourth-card" }, [
                _c("div", { staticClass: "card-component" }, [
                  _c(
                    "a",
                    {
                      attrs: {
                        href: "examples/product-page.html",
                        target: "_blank"
                      }
                    },
                    [
                      _c("div", { staticClass: "front" }, [
                        _c("img", {
                          directives: [
                            {
                              name: "lazy",
                              rawName: "v-lazy",
                              value: "img/presentation-page/pages2_thumb.jpg",
                              expression:
                                "'img/presentation-page/pages2_thumb.jpg'"
                            }
                          ],
                          attrs: { alt: "pages2-thumb" }
                        })
                      ])
                    ]
                  )
                ])
              ])
            ])
          ])
        ])
      ]
    ),
    _vm._m(2),
    _c("div", { staticClass: "section section-cards" }, [
      _c("div", { staticClass: "container" }, [
        _vm._m(3),
        _c("div", { staticClass: "row" }, [
          _c("div", { staticClass: "col-md-12" }, [
            _c("div", { staticClass: "images-container" }, [
              _c("div", { staticClass: "image-container1" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/card3.jpg",
                      expression: "'img/presentation-page/card3.jpg'"
                    }
                  ],
                  attrs: { alt: "card 3" }
                })
              ]),
              _c("div", { staticClass: "image-container2" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/card6.jpg",
                      expression: "'img/presentation-page/card6.jpg'"
                    }
                  ],
                  attrs: { alt: "card 6" }
                })
              ]),
              _c("div", { staticClass: "image-container3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/card7.jpg",
                      expression: "'img/presentation-page/card7.jpg'"
                    }
                  ],
                  attrs: { alt: "card 7" }
                })
              ]),
              _c("div", { staticClass: "image-container4" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/card5.jpg",
                      expression: "'img/presentation-page/card5.jpg'"
                    }
                  ],
                  attrs: { alt: "card 5" }
                })
              ]),
              _c("div", { staticClass: "image-container5" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/card4.jpg",
                      expression: "'img/presentation-page/card4.jpg'"
                    }
                  ],
                  attrs: { alt: "card 4" }
                })
              ])
            ])
          ])
        ])
      ])
    ]),
    _vm._m(4),
    _c(
      "div",
      {
        staticClass: "section section-sections",
        attrs: { "data-background-color": "gray" }
      },
      [
        _vm._m(5),
        _c("div", { staticClass: "container-fluid" }, [
          _c("div", { staticClass: "section-cols" }, [
            _c("div", { staticClass: "row" }, [
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/header1.jpg",
                      expression: "'img/presentation-page/header1.jpg'"
                    }
                  ],
                  attrs: { alt: "header1" }
                })
              ]),
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/header2.jpg",
                      expression: "'img/presentation-page/header2.jpg'"
                    }
                  ],
                  attrs: { alt: "header2" }
                })
              ]),
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/header3.jpg",
                      expression: "'img/presentation-page/header3.jpg'"
                    }
                  ],
                  attrs: { alt: "header3" }
                }),
                _c("img", {
                  staticClass: "rellax",
                  attrs: {
                    "data-rellax-speed": "4",
                    src: "img/presentation-page/pricing5.jpg",
                    alt: "pricing5"
                  }
                })
              ]),
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/header4.jpg",
                      expression: "'img/presentation-page/header4.jpg'"
                    }
                  ],
                  attrs: { alt: "header4" }
                })
              ])
            ]),
            _c("div", { staticClass: "row" }, [
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/features1.jpg",
                      expression: "'img/presentation-page/features1.jpg'"
                    }
                  ],
                  attrs: { alt: "features1" }
                })
              ]),
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/features2.jpg",
                      expression: "'img/presentation-page/features2.jpg'"
                    }
                  ],
                  attrs: { alt: "features2" }
                })
              ]),
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/features3.jpg",
                      expression: "'img/presentation-page/features3.jpg'"
                    }
                  ],
                  attrs: { alt: "features3" }
                })
              ]),
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/features4.jpg",
                      expression: "'img/presentation-page/features4.jpg'"
                    }
                  ],
                  attrs: { alt: "features4" }
                })
              ])
            ]),
            _c("div", { staticClass: "row" }, [
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/features5.jpg",
                      expression: "'img/presentation-page/features5.jpg'"
                    }
                  ],
                  attrs: { alt: "" }
                }),
                _c("img", {
                  staticClass: "rellax",
                  attrs: {
                    "data-rellax-speed": "5",
                    src: "img/presentation-page/features2.jpg",
                    alt: ""
                  }
                })
              ]),
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/features6.jpg",
                      expression: "'img/presentation-page/features6.jpg'"
                    }
                  ],
                  attrs: { alt: "" }
                })
              ]),
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/features7.jpg",
                      expression: "'img/presentation-page/features7.jpg'"
                    }
                  ],
                  attrs: { alt: "" }
                })
              ]),
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/features8.jpg",
                      expression: "'img/presentation-page/features8.jpg'"
                    }
                  ],
                  attrs: { alt: "" }
                })
              ])
            ]),
            _c("div", { staticClass: "row" }, [
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/blogpost1.jpg",
                      expression: "'img/presentation-page/blogpost1.jpg'"
                    }
                  ],
                  attrs: { alt: "" }
                })
              ]),
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/blogpost2.jpg",
                      expression: "'img/presentation-page/blogpost2.jpg'"
                    }
                  ],
                  attrs: { alt: "" }
                })
              ]),
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/blogpost3.jpg",
                      expression: "'img/presentation-page/blogpost3.jpg'"
                    }
                  ],
                  attrs: { alt: "" }
                })
              ]),
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/blogpost4.jpg",
                      expression: "'img/presentation-page/blogpost4.jpg'"
                    }
                  ],
                  attrs: { alt: "" }
                })
              ])
            ]),
            _c("div", { staticClass: "row" }, [
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/blogpost5.jpg",
                      expression: "'img/presentation-page/blogpost5.jpg'"
                    }
                  ],
                  attrs: { alt: "" }
                })
              ]),
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/team1.jpg",
                      expression: "'img/presentation-page/team1.jpg'"
                    }
                  ],
                  attrs: { alt: "" }
                })
              ]),
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/team2.jpg",
                      expression: "'img/presentation-page/team2.jpg'"
                    }
                  ],
                  attrs: { alt: "" }
                })
              ]),
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/team3.jpg",
                      expression: "'img/presentation-page/team3.jpg'"
                    }
                  ],
                  attrs: { alt: "" }
                }),
                _c("img", {
                  staticClass: "rellax",
                  attrs: {
                    "data-rellax-speed": "5",
                    src: "img/presentation-page/contact1.jpg",
                    alt: ""
                  }
                })
              ])
            ]),
            _c("div", { staticClass: "row" }, [
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/team4.jpg",
                      expression: "'img/presentation-page/team4.jpg'"
                    }
                  ],
                  attrs: { alt: "" }
                })
              ]),
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/team5.jpg",
                      expression: "'img/presentation-page/team5.jpg'"
                    }
                  ],
                  attrs: { alt: "" }
                })
              ]),
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/projects1.jpg",
                      expression: "'img/presentation-page/projects1.jpg'"
                    }
                  ],
                  attrs: { alt: "" }
                })
              ]),
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/projects2.jpg",
                      expression: "'img/presentation-page/projects2.jpg'"
                    }
                  ],
                  attrs: { alt: "" }
                })
              ])
            ]),
            _c("div", { staticClass: "row" }, [
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/projects4.jpg",
                      expression: "'img/presentation-page/projects4.jpg'"
                    }
                  ],
                  attrs: { alt: "" }
                })
              ]),
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/projects5.jpg",
                      expression: "'img/presentation-page/projects5.jpg'"
                    }
                  ],
                  attrs: { alt: "" }
                })
              ]),
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/pricing1.jpg",
                      expression: "'img/presentation-page/pricing1.jpg'"
                    }
                  ],
                  attrs: { alt: "" }
                })
              ]),
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/pricing2.jpg",
                      expression: "'img/presentation-page/pricing2.jpg'"
                    }
                  ],
                  attrs: { alt: "" }
                })
              ])
            ]),
            _c("div", { staticClass: "row" }, [
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/pricing3.jpg",
                      expression: "'img/presentation-page/pricing3.jpg'"
                    }
                  ],
                  attrs: { alt: "" }
                })
              ]),
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/pricing4.jpg",
                      expression: "'img/presentation-page/pricing4.jpg'"
                    }
                  ],
                  attrs: { alt: "" }
                })
              ]),
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/pricing5.jpg",
                      expression: "'img/presentation-page/pricing5.jpg'"
                    }
                  ],
                  attrs: { alt: "" }
                })
              ]),
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/testimonials1.jpg",
                      expression: "'img/presentation-page/testimonials1.jpg'"
                    }
                  ],
                  attrs: { alt: "" }
                })
              ])
            ]),
            _c("div", { staticClass: "row" }, [
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/testimonials2.jpg",
                      expression: "'img/presentation-page/testimonials2.jpg'"
                    }
                  ],
                  attrs: { alt: "" }
                })
              ]),
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/testimonials3.jpg",
                      expression: "'img/presentation-page/testimonials3.jpg'"
                    }
                  ],
                  attrs: { alt: "" }
                })
              ]),
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/contact1.jpg",
                      expression: "'img/presentation-page/contact1.jpg'"
                    }
                  ],
                  attrs: { alt: "" }
                })
              ]),
              _c("div", { staticClass: "col-md-3" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/presentation-page/contact2.jpg",
                      expression: "'img/presentation-page/contact2.jpg'"
                    }
                  ],
                  attrs: { alt: "" }
                })
              ])
            ])
          ])
        ])
      ]
    ),
    _c(
      "div",
      {
        staticClass: "section section-examples",
        attrs: { "data-background-color": "black" }
      },
      [
        _c("div", { staticClass: "container" }, [
          _vm._m(6),
          _c("div", { staticClass: "row" }, [
            _c("div", { staticClass: "col-md-4" }, [
              _c("h5", { staticClass: "title" }, [_vm._v("About Us")]),
              _c(
                "div",
                { staticClass: "card" },
                [
                  _c(
                    "router-link",
                    { attrs: { to: "/about", target: "_blank" } },
                    [
                      _c("img", {
                        directives: [
                          {
                            name: "lazy",
                            rawName: "v-lazy",
                            value: "img/presentation-page/pages/about-us.jpg",
                            expression:
                              "'img/presentation-page/pages/about-us.jpg'"
                          }
                        ],
                        attrs: { alt: "" }
                      })
                    ]
                  )
                ],
                1
              ),
              _c("h5", { staticClass: "title" }, [_vm._v("Landing Page")]),
              _c(
                "div",
                { staticClass: "card" },
                [
                  _c(
                    "router-link",
                    { attrs: { to: "/landing", target: "_blank" } },
                    [
                      _c("img", {
                        directives: [
                          {
                            name: "lazy",
                            rawName: "v-lazy",
                            value: "img/presentation-page/pages/landing.jpg",
                            expression:
                              "'img/presentation-page/pages/landing.jpg'"
                          }
                        ],
                        attrs: { alt: "" }
                      })
                    ]
                  )
                ],
                1
              ),
              _c("h5", { staticClass: "title" }, [_vm._v("Login Page")]),
              _c(
                "div",
                { staticClass: "card" },
                [
                  _c(
                    "router-link",
                    { attrs: { to: "/login", target: "_blank" } },
                    [
                      _c("img", {
                        directives: [
                          {
                            name: "lazy",
                            rawName: "v-lazy",
                            value: "img/presentation-page/pages/login.jpg",
                            expression:
                              "'img/presentation-page/pages/login.jpg'"
                          }
                        ],
                        attrs: { alt: "" }
                      })
                    ]
                  )
                ],
                1
              ),
              _c("h5", { staticClass: "title" }, [_vm._v("Signup Page")]),
              _c(
                "div",
                { staticClass: "card" },
                [
                  _c(
                    "router-link",
                    { attrs: { to: "/signup", target: "_blank" } },
                    [
                      _c("img", {
                        directives: [
                          {
                            name: "lazy",
                            rawName: "v-lazy",
                            value: "img/presentation-page/pages/signup.jpg",
                            expression:
                              "'img/presentation-page/pages/signup.jpg'"
                          }
                        ],
                        attrs: { alt: "" }
                      })
                    ]
                  )
                ],
                1
              )
            ]),
            _c("div", { staticClass: "col-md-4" }, [
              _c("h5", { staticClass: "title" }, [_vm._v("Blog Post")]),
              _c(
                "div",
                { staticClass: "card" },
                [
                  _c(
                    "router-link",
                    { attrs: { to: "/blog-post", target: "_blank" } },
                    [
                      _c("img", {
                        directives: [
                          {
                            name: "lazy",
                            rawName: "v-lazy",
                            value: "img/presentation-page/pages/blog-post.jpg",
                            expression:
                              "'img/presentation-page/pages/blog-post.jpg'"
                          }
                        ],
                        attrs: { alt: "" }
                      })
                    ]
                  )
                ],
                1
              ),
              _c("h5", { staticClass: "title" }, [_vm._v("Product Page")]),
              _c(
                "div",
                { staticClass: "card" },
                [
                  _c(
                    "router-link",
                    { attrs: { to: "/product", target: "_blank" } },
                    [
                      _c("img", {
                        directives: [
                          {
                            name: "lazy",
                            rawName: "v-lazy",
                            value: "img/presentation-page/pages/product.jpg",
                            expression:
                              "'img/presentation-page/pages/product.jpg'"
                          }
                        ],
                        attrs: { alt: "" }
                      })
                    ]
                  )
                ],
                1
              ),
              _c("h5", { staticClass: "title" }, [_vm._v("Profile Page")]),
              _c(
                "div",
                { staticClass: "card" },
                [
                  _c(
                    "router-link",
                    { attrs: { to: "/profile", target: "_blank" } },
                    [
                      _c("img", {
                        directives: [
                          {
                            name: "lazy",
                            rawName: "v-lazy",
                            value: "img/presentation-page/pages/profile.jpg",
                            expression:
                              "'img/presentation-page/pages/profile.jpg'"
                          }
                        ],
                        attrs: { alt: "" }
                      })
                    ]
                  )
                ],
                1
              )
            ]),
            _c("div", { staticClass: "col-md-4" }, [
              _c("h5", { staticClass: "title" }, [_vm._v("Pricing Page")]),
              _c(
                "div",
                { staticClass: "card" },
                [
                  _c(
                    "router-link",
                    { attrs: { to: "/pricing", target: "_blank" } },
                    [
                      _c("img", {
                        directives: [
                          {
                            name: "lazy",
                            rawName: "v-lazy",
                            value: "img/presentation-page/pages/pricing.jpg",
                            expression:
                              "'img/presentation-page/pages/pricing.jpg'"
                          }
                        ],
                        attrs: { alt: "" }
                      })
                    ]
                  )
                ],
                1
              ),
              _c("h5", { staticClass: "title" }, [_vm._v("Ecommerce")]),
              _c(
                "div",
                { staticClass: "card" },
                [
                  _c(
                    "router-link",
                    { attrs: { to: "/ecommerce", target: "_blank" } },
                    [
                      _c("img", {
                        directives: [
                          {
                            name: "lazy",
                            rawName: "v-lazy",
                            value: "img/presentation-page/pages/ecommerce.jpg",
                            expression:
                              "'img/presentation-page/pages/ecommerce.jpg'"
                          }
                        ],
                        attrs: { alt: "" }
                      })
                    ]
                  )
                ],
                1
              ),
              _c("h5", { staticClass: "title" }, [_vm._v("Blog Posts")]),
              _c(
                "div",
                { staticClass: "card" },
                [
                  _c(
                    "router-link",
                    { attrs: { to: "/blog-posts", target: "_blank" } },
                    [
                      _c("img", {
                        directives: [
                          {
                            name: "lazy",
                            rawName: "v-lazy",
                            value: "img/presentation-page/pages/blog-posts.jpg",
                            expression:
                              "'img/presentation-page/pages/blog-posts.jpg'"
                          }
                        ],
                        attrs: { alt: "" }
                      })
                    ]
                  )
                ],
                1
              ),
              _c("h5", { staticClass: "title" }, [_vm._v("Contact Us")]),
              _c(
                "div",
                { staticClass: "card" },
                [
                  _c(
                    "router-link",
                    { attrs: { to: "/contact", target: "_blank" } },
                    [
                      _c("img", {
                        directives: [
                          {
                            name: "lazy",
                            rawName: "v-lazy",
                            value: "img/presentation-page/pages/contact.jpg",
                            expression:
                              "'img/presentation-page/pages/contact.jpg'"
                          }
                        ],
                        attrs: { alt: "" }
                      })
                    ]
                  )
                ],
                1
              )
            ])
          ])
        ])
      ]
    ),
    _vm._m(7),
    _c(
      "div",
      {
        staticClass: "section features-7 section-image",
        staticStyle: { "background-image": "url('img/bg51.jpg')" }
      },
      [
        _c("div", { staticClass: "container-fluid" }, [
          _c("div", { staticClass: "row" }, [
            _c("div", { staticClass: "col-md-6 px-0" }, [
              _c(
                "div",
                { staticClass: "col-sm-12" },
                [
                  _c("info-section", {
                    attrs: {
                      title: "Save Time & Money",
                      icon: "now-ui-icons business_money-coins",
                      description:
                        "Creating your design from scratch with dedicated designers\n                                    can be very expensive.Using Now UI Kit PRO you don't have to worry about\n                                    customising the basic Bootstrap 4 design or its components."
                    }
                  }),
                  _c("info-section", {
                    attrs: {
                      title: "Bootstrap 4 & Flexbox",
                      icon: "now-ui-icons text_bold",
                      description:
                        "It is built over Bootstrap 4, it's fully responsive and has\n                                    all the benefits of the flexbox for the layout, grid system and components. This\n                                    is a huge advantage when you work with columns."
                    }
                  }),
                  _c("info-section", {
                    attrs: {
                      title: "Fast Prototype",
                      icon: "now-ui-icons education_paper",
                      description:
                        "Using Now UI Kit PRO you can create hundreds of components\n                                    combinations within seconds and present them to your client. You just need to\n                                    change some classes and colors."
                    }
                  })
                ],
                1
              )
            ]),
            _c("div", { staticClass: "col-md-6" }, [
              _c("div", { staticClass: "image-container" }, [
                _c("img", {
                  directives: [
                    {
                      name: "lazy",
                      rawName: "v-lazy",
                      value: "img/ipad3.png",
                      expression: "'img/ipad3.png'"
                    }
                  ],
                  attrs: { alt: "" }
                })
              ])
            ])
          ])
        ])
      ]
    ),
    _c(
      "div",
      {
        staticClass: "section section-testimonials",
        attrs: { "data-background-color": "black" }
      },
      [
        _vm._m(8),
        _c("div", { staticClass: "row" }, [
          _vm._m(9),
          _c(
            "div",
            { staticClass: "col-md-8" },
            [
              _c(
                "el-carousel",
                { attrs: { height: "450px" } },
                [
                  _c(
                    "el-carousel-item",
                    [
                      _c(
                        "card",
                        { attrs: { type: "testimonial", plain: "" } },
                        [
                          _c("img", {
                            staticClass: "img img-raised rounded",
                            attrs: {
                              slot: "avatar",
                              src:
                                "https://s3.amazonaws.com/creativetim_bucket/photos/154001/thumb.JPG?1501184024",
                              alt: ""
                            },
                            slot: "avatar"
                          }),
                          _c("h5", { staticClass: "card-description" }, [
                            _vm._v(
                              '"Awesome Design and very well organized code structure! Also, it contains numerous elements using which achieving the perfect or required template can be done with ease. Great job!" '
                            )
                          ]),
                          _c("h4", { staticClass: "card-title" }, [
                            _vm._v("Stefan")
                          ]),
                          _c("h6", { staticClass: "category text-muted" }, [
                            _vm._v("Web Designer")
                          ]),
                          _c("div", { staticClass: "card-footer" }, [
                            _c("i", {
                              staticClass: "fas fa-star text-warning"
                            }),
                            _c("i", {
                              staticClass: "fas fa-star text-warning"
                            }),
                            _c("i", {
                              staticClass: "fas fa-star text-warning"
                            }),
                            _c("i", {
                              staticClass: "fas fa-star text-warning"
                            }),
                            _c("i", { staticClass: "fas fa-star text-warning" })
                          ])
                        ]
                      )
                    ],
                    1
                  ),
                  _c(
                    "el-carousel-item",
                    [
                      _c(
                        "card",
                        { attrs: { type: "testimonial", plain: "" } },
                        [
                          _c("img", {
                            staticClass: "img img-raised rounded",
                            attrs: {
                              slot: "avatar",
                              src:
                                "https://s3.amazonaws.com/uifaces/faces/twitter/chadengle/128.jpg",
                              alt: ""
                            },
                            slot: "avatar"
                          }),
                          _c("h5", { staticClass: "card-description" }, [
                            _vm._v(
                              '"It looks great and its somewhat futuristics cant wait to use it on a project here in nigeria i\'m sure it would put me ahead.. I cant wait to hv enough money to buy ur product." '
                            )
                          ]),
                          _c("h4", { staticClass: "card-title" }, [
                            _vm._v("Mr. Bones")
                          ]),
                          _c("h6", { staticClass: "category text-muted" }, [
                            _vm._v("Web Designer")
                          ]),
                          _c("div", { staticClass: "card-footer" }, [
                            _c("i", {
                              staticClass: "fas fa-star text-warning"
                            }),
                            _c("i", {
                              staticClass: "fas fa-star text-warning"
                            }),
                            _c("i", {
                              staticClass: "fas fa-star text-warning"
                            }),
                            _c("i", {
                              staticClass: "fas fa-star text-warning"
                            }),
                            _c("i", { staticClass: "fas fa-star text-warning" })
                          ])
                        ]
                      )
                    ],
                    1
                  ),
                  _c(
                    "el-carousel-item",
                    [
                      _c(
                        "card",
                        { attrs: { type: "testimonial", plain: "" } },
                        [
                          _c("img", {
                            staticClass: "img img-raised rounded",
                            attrs: {
                              slot: "avatar",
                              src:
                                "https://s3.amazonaws.com/creativetim_bucket/photos/123124/thumb.?1480480048",
                              alt: ""
                            },
                            slot: "avatar"
                          }),
                          _c("h5", { staticClass: "card-description" }, [
                            _vm._v(
                              "\"Everything is perfect. Codes are really organized. It's easy to edit for my own purposes. It's great that it is built on top of Bootstrap 4.\" "
                            ),
                            _c("br"),
                            _c("br")
                          ]),
                          _c("h4", { staticClass: "card-title" }, [
                            _vm._v("DOĞA")
                          ]),
                          _c("h6", { staticClass: "category text-muted" }, [
                            _vm._v("Web Developer")
                          ]),
                          _c("div", { staticClass: "card-footer" }, [
                            _c("i", {
                              staticClass: "fas fa-star text-warning"
                            }),
                            _c("i", {
                              staticClass: "fas fa-star text-warning"
                            }),
                            _c("i", {
                              staticClass: "fas fa-star text-warning"
                            }),
                            _c("i", {
                              staticClass: "fas fa-star text-warning"
                            }),
                            _c("i", { staticClass: "fas fa-star text-warning" })
                          ])
                        ]
                      )
                    ],
                    1
                  )
                ],
                1
              )
            ],
            1
          ),
          _vm._m(10)
        ])
      ]
    ),
    _c(
      "div",
      { staticClass: "section section-pricing", attrs: { id: "sectionBuy" } },
      [
        _c("div", { staticClass: "container" }, [
          _c("div", { staticClass: "our-clients" }, [
            _c("div", { staticClass: "container" }, [
              _c("div", { staticClass: "row" }, [
                _c("div", { staticClass: "col-md-2 ml-auto" }, [
                  _c("img", {
                    directives: [
                      {
                        name: "lazy",
                        rawName: "v-lazy",
                        value: "img/presentation-page/vodafone.jpg",
                        expression: "'img/presentation-page/vodafone.jpg'"
                      }
                    ],
                    attrs: { alt: "" }
                  })
                ]),
                _c("div", { staticClass: "col-md-2" }, [
                  _c("img", {
                    directives: [
                      {
                        name: "lazy",
                        rawName: "v-lazy",
                        value: "img/presentation-page/microsoft.jpg",
                        expression: "'img/presentation-page/microsoft.jpg'"
                      }
                    ],
                    attrs: { alt: "" }
                  })
                ]),
                _c("div", { staticClass: "col-md-2" }, [
                  _c("img", {
                    directives: [
                      {
                        name: "lazy",
                        rawName: "v-lazy",
                        value: "img/presentation-page/harvard.jpg",
                        expression: "'img/presentation-page/harvard.jpg'"
                      }
                    ],
                    attrs: { alt: "" }
                  })
                ]),
                _c("div", { staticClass: "col-md-2 mr-auto" }, [
                  _c("img", {
                    directives: [
                      {
                        name: "lazy",
                        rawName: "v-lazy",
                        value: "img/presentation-page/stanford.jpg",
                        expression: "'img/presentation-page/stanford.jpg'"
                      }
                    ],
                    attrs: { alt: "" }
                  })
                ])
              ])
            ])
          ]),
          _c("div", { staticClass: "row" }, [
            _vm._m(11),
            _c("div", { staticClass: "col-md-8 ml-auto mr-auto" }, [
              _vm._m(12),
              _c("div", { staticClass: "row" }, [
                _c(
                  "div",
                  { staticClass: "col-md-6" },
                  [
                    _c(
                      "card",
                      {
                        staticClass: "card-pricing card-margin",
                        staticStyle: {
                          "background-image": "url('img/bg27.jpg')"
                        },
                        attrs: { type: "background", raised: "" }
                      },
                      [
                        _c("h6", { staticClass: "category" }, [
                          _vm._v("Personal License")
                        ]),
                        _c("h1", { staticClass: "card-title" }, [
                          _c("small", [_vm._v("$")]),
                          _vm._v(" 69 ")
                        ]),
                        _c("ul", [
                          _c("li", [
                            _c("b", [_vm._v("HTML/CSS/JS/SASS")]),
                            _vm._v(" Files ")
                          ]),
                          _c("li", [
                            _c("b", [_vm._v("Fully Coded")]),
                            _vm._v(" Components ")
                          ]),
                          _c("li", [
                            _c("b", [_vm._v("Responsive")]),
                            _vm._v(" Design ")
                          ]),
                          _c("li", [
                            _vm._v("Product "),
                            _c("b", [_vm._v(" Documentation")])
                          ])
                        ]),
                        _c(
                          "a",
                          {
                            staticClass: "btn btn-primary btn-round",
                            attrs: {
                              href:
                                "https://www.creative-tim.com/buy/vue-now-ui-kit-pro?license=1"
                            }
                          },
                          [_vm._v(" Buy Now! ")]
                        )
                      ]
                    )
                  ],
                  1
                ),
                _c(
                  "div",
                  { staticClass: "col-md-6" },
                  [
                    _c(
                      "card",
                      {
                        staticClass: "card-pricing",
                        staticStyle: {
                          "background-image": "url('img/bg37.jpg')"
                        },
                        attrs: { type: "background", raised: "" }
                      },
                      [
                        _c("h6", { staticClass: "category" }, [
                          _vm._v("Developer License")
                        ]),
                        _c("h1", { staticClass: "card-title" }, [
                          _c("small", [_vm._v("$")]),
                          _vm._v(" 279 ")
                        ]),
                        _c("ul", [
                          _c("li", [_vm._v("Everything in Personal")]),
                          _c("li", [
                            _c("b", [_vm._v("+")]),
                            _vm._v(" Create "),
                            _c("b", [_vm._v("Multiple Websites")])
                          ]),
                          _c("li", [
                            _c("b", [_vm._v("+")]),
                            _vm._v(" Sell to "),
                            _c("b", [_vm._v("Multiple Clients")])
                          ]),
                          _c("li", [
                            _c("b", [_vm._v("+")]),
                            _vm._v(" Can "),
                            _c("b", [_vm._v(" Charge Customers")])
                          ]),
                          _c("li", [
                            _c("b", [_vm._v("+")]),
                            _vm._v(" Use in "),
                            _c("b", [_vm._v(" Commercial Projects")])
                          ]),
                          _c("li", [
                            _c("b", [_vm._v("+")]),
                            _vm._v(" Use in "),
                            _c("b", [_vm._v(" SaaS Projects")])
                          ])
                        ]),
                        _c(
                          "a",
                          {
                            staticClass: "btn btn-primary btn-round",
                            attrs: {
                              href:
                                "https://www.creative-tim.com/buy/vue-now-ui-kit-pro?license=2"
                            }
                          },
                          [_vm._v(" Buy Now! ")]
                        )
                      ]
                    )
                  ],
                  1
                )
              ])
            ]),
            _vm._m(13),
            _vm._m(14)
          ])
        ])
      ]
    )
  ])
}
var staticRenderFns = [
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "rellax-text-container rellax-text" }, [
      _c(
        "h1",
        { staticClass: "h1-seo", attrs: { "data-rellax-speed": "-2" } },
        [_vm._v("S U G S U G")]
      ),
      _c("div", { staticClass: "pro" }, [_vm._v("PRO")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "row" }, [
      _c("div", { staticClass: "col-md-8 ml-auto mr-auto" }, [
        _c("h2", { staticClass: "text-center title" }, [
          _vm._v("Impressive collection of elements "),
          _c("br"),
          _c("small", { staticClass: "description" }, [
            _vm._v("Designed to look gorgeous together")
          ])
        ]),
        _c("h5", { staticClass: "text-center description" }, [
          _vm._v(
            "Now UI Kit Pro comes with a huge number of customisable elements. They are not only designed to be pixel perfect and light but they are also easy to use and combine well with other components."
          )
        ]),
        _c("div", { staticClass: "space-50" })
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "section section-basic-components" }, [
      _c("div", { staticClass: "container" }, [
        _c("div", { staticClass: "row" }, [
          _c("div", { staticClass: "col-lg-5 col-md-7 ml-auto mr-auto" }, [
            _c("h2", { staticClass: "title" }, [_vm._v("Basic Elements")]),
            _c("h6", { staticClass: "category" }, [
              _vm._v("The core elements of your website")
            ]),
            _c("h5", { staticClass: "description" }, [
              _vm._v(
                "We re-styled every Bootstrap 4 element to match the Now UI Kit style. All the Bootstrap 4 components that you need in a development have been re-design with the new look. Besides the numerous basic elements, we have also created additional classes. All these items will help you take your project to the next level."
              )
            ])
          ]),
          _c("div", { staticClass: "col-lg-6 col-md-12" }, [
            _c("div", { staticClass: "image-container" }, [
              _c("img", {
                staticClass: "components-macbook",
                attrs: { src: "img/ipad.png", alt: "ipad_img" }
              }),
              _c("img", {
                staticClass: "table-img",
                attrs: { src: "img/presentation-page/table.jpg", alt: "table" }
              }),
              _c("img", {
                staticClass: "share-btn-img",
                attrs: {
                  src: "img/presentation-page/share-btn.jpg",
                  alt: "share button"
                }
              }),
              _c("img", {
                staticClass: "coloured-card-btn-img",
                attrs: {
                  src: "img/presentation-page/coloured-card-with-btn.jpg",
                  alt: "coloured card with button"
                }
              }),
              _c("img", {
                staticClass: "coloured-card-img",
                attrs: {
                  src: "img/presentation-page/coloured-card.jpg",
                  alt: "coloured card"
                }
              }),
              _c("img", {
                staticClass: "social-img",
                attrs: {
                  src: "img/presentation-page/social-row.jpg",
                  alt: "social row"
                }
              }),
              _c("img", {
                staticClass: "linkedin-btn-img",
                attrs: {
                  src: "img/presentation-page/linkedin-btn.jpg",
                  alt: "linked in button"
                }
              })
            ])
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "row" }, [
      _c("div", { staticClass: "col-md-8 text-center ml-auto mr-auto" }, [
        _c("div", { staticClass: "section-description" }, [
          _c("h2", { staticClass: "title" }, [_vm._v("Beautiful Cards")]),
          _c("h6", { staticClass: "category" }, [
            _vm._v("One Card for Every Problem")
          ]),
          _c("h5", { staticClass: "description" }, [
            _vm._v(
              "From cards designed for blog posts, to product cards or user profiles, you will have many options to choose from. All the cards follow the Now UI Kit style principles and have a design that stands out. We have gone above and beyond with options for you to organise your information. "
            )
          ])
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      {
        staticClass: "section section-content",
        attrs: { "data-background-color": "black" }
      },
      [
        _c("div", { staticClass: "container" }, [
          _c("div", { staticClass: "row" }, [
            _c("div", { staticClass: "col-md-5" }, [
              _c("div", { staticClass: "image-container" }, [
                _c("img", {
                  staticClass: "img img-raised rounded img-comments rellax",
                  attrs: {
                    "data-rellax-speed": "1",
                    src: "img/presentation-page/content1.jpg",
                    alt: "content 1"
                  }
                }),
                _c("img", {
                  staticClass: "img img-raised rounded img-blog rellax",
                  attrs: {
                    "data-rellax-speed": "4",
                    src: "img/presentation-page/content4.jpg",
                    alt: "content 4"
                  }
                })
              ])
            ]),
            _c("div", { staticClass: "col-md-4 ml-auto mr-auto" }, [
              _c("div", { staticClass: "section-description" }, [
                _c("h2", { staticClass: "title" }, [_vm._v("Content Areas")]),
                _c("h6", { staticClass: "category" }, [
                  _vm._v("For Areas that Need More Space")
                ]),
                _c("h5", { staticClass: "description" }, [
                  _vm._v(
                    "We took into consideration multiple use cases and came up with some specific areas for you. If you need elements such as tables, comments, description areas, tabs and many others, we've got you covered. They're beautiful and easy to use for the end user navigating your website. "
                  )
                ])
              ])
            ])
          ])
        ])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "container" }, [
      _c("div", { staticClass: "col-md-8 ml-auto mr-auto" }, [
        _c("div", { staticClass: "section-description text-center" }, [
          _c("h2", { staticClass: "title" }, [
            _vm._v("Sections you will love")
          ]),
          _c("h5", { staticClass: "description" }, [
            _vm._v(
              " Build pages in no time using pre-made sections! From headers to footers, you will be able to choose the best combination for your project. We have created multiple sections for you to put together and customise into pixel perfect example pages."
            )
          ]),
          _c(
            "a",
            {
              staticClass: "btn btn-primary btn-round",
              attrs: { href: "sections.html", target: "_blank" }
            },
            [_vm._v("View All Sections")]
          )
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-md-8 ml-auto mr-auto text-center" }, [
      _c("div", { staticClass: "section-description" }, [
        _c("h2", { staticClass: "title" }, [_vm._v("Example Pages")]),
        _c("h5", { staticClass: "description" }, [
          _vm._v(
            "Forget about building everything from scratch. From landing pages to e-commerce or blog pages, you will be able jump start your development. Show your clients a quick prototype and get inspired for your next project!"
          )
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      {
        staticClass: "section section-icons",
        attrs: { "data-background-color": "black" }
      },
      [
        _c("div", { staticClass: "container-fluid" }, [
          _c("div", { staticClass: "row" }, [
            _c("div", { staticClass: "col-md-3" }, [
              _c("div", { staticClass: "icons-nucleo" }, [
                _c("i", {
                  staticClass: "first-left-icon now-ui-icons ui-1_send"
                }),
                _c("i", {
                  staticClass: "second-left-icon now-ui-icons ui-2_like"
                }),
                _c("i", {
                  staticClass:
                    "third-left-icon now-ui-icons transportation_air-baloon"
                }),
                _c("i", {
                  staticClass: "fourth-left-icon now-ui-icons text_bold"
                }),
                _c("i", {
                  staticClass: "fifth-left-icon now-ui-icons tech_headphones"
                }),
                _c("i", {
                  staticClass:
                    "sixth-left-icon now-ui-icons emoticons_satisfied"
                }),
                _c("i", {
                  staticClass:
                    "seventh-left-icon now-ui-icons shopping_cart-simple"
                }),
                _c("i", {
                  staticClass: "eighth-left-icon now-ui-icons objects_spaceship"
                }),
                _c("i", {
                  staticClass: "ninth-left-icon now-ui-icons media-2_note-03"
                }),
                _c("i", {
                  staticClass: "tenth-left-icon now-ui-icons ui-2_favourite-28"
                })
              ])
            ]),
            _c("div", { staticClass: "col-md-6 text-center" }, [
              _c("h2", { staticClass: "title" }, [_vm._v("Custom Icons")]),
              _c("h5", { staticClass: "description" }, [
                _vm._v(
                  " Now UI Kit PRO comes with 100 custom demo icons made by our friends from "
                ),
                _c(
                  "a",
                  {
                    attrs: {
                      href: "https://nucleoapp.com/?ref=1712",
                      target: "_blank"
                    }
                  },
                  [_vm._v("NucleoApp")]
                ),
                _vm._v(
                  ". The official package contains over 20.729 icons which are looking great in combination with Now UI Kit PRO. Make sure you check all of them and use those that you like the most. "
                )
              ]),
              _c("br"),
              _c(
                "a",
                {
                  staticClass: "btn btn-primary btn-round btn-lg ",
                  attrs: {
                    href:
                      "https:///demos.creative-tim.com/now-ui-kit-pro/nucleo-icons.html",
                    target: "_blank"
                  }
                },
                [_vm._v("View Demo Icons")]
              ),
              _c(
                "a",
                {
                  staticClass: "btn btn-outline-primary btn-round btn-lg ",
                  attrs: {
                    href: "https://nucleoapp.com/?ref=1712",
                    target: "_blank"
                  }
                },
                [_vm._v("View All Icons")]
              )
            ]),
            _c("div", { staticClass: "col-md-3" }, [
              _c("div", { staticClass: "icons-nucleo icons-nucleo-right" }, [
                _c("i", {
                  staticClass: "first-right-icon now-ui-icons design_palette"
                }),
                _c("i", {
                  staticClass: "second-right-icon now-ui-icons clothes_tie-bow"
                }),
                _c("i", {
                  staticClass: "third-right-icon now-ui-icons location_pin"
                }),
                _c("i", {
                  staticClass: "fourth-right-icon now-ui-icons objects_key-25"
                }),
                _c("i", {
                  staticClass: "fifth-right-icon now-ui-icons travel_istanbul"
                }),
                _c("i", {
                  staticClass:
                    "sixth-right-icon now-ui-icons business_briefcase-24"
                }),
                _c("i", {
                  staticClass: "seventh-right-icon now-ui-icons design_image"
                }),
                _c("i", {
                  staticClass: "eighth-right-icon now-ui-icons location_world"
                }),
                _c("i", {
                  staticClass: "ninth-right-icon now-ui-icons objects_planet"
                }),
                _c("i", {
                  staticClass: "tenth-right-icon now-ui-icons education_atom"
                })
              ])
            ])
          ])
        ])
      ]
    )
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "row" }, [
      _c("div", { staticClass: "col-md-8 ml-auto mr-auto text-center" }, [
        _c("h2", { staticClass: "title" }, [
          _vm._v("Trusted by 245,000+ People")
        ]),
        _c("h5", { staticClass: "description" }, [
          _vm._v(
            "The UI Kits, Templates and Dashboards that we've created are used by "
          ),
          _c("b", [_vm._v("245,000+ web developers")]),
          _vm._v(" in over "),
          _c("b", [_vm._v("426,000 Web Projects")]),
          _vm._v(". This is what some of them think:")
        ])
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-md-2" }, [
      _c("div", { staticClass: "testimonials-people" }, [
        _c("img", {
          staticClass: "left-first-person img-raised rellax",
          attrs: {
            "data-rellax-speed": "1",
            src:
              "https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg",
            alt: ""
          }
        }),
        _c("img", {
          staticClass: "left-second-person img-raised rellax",
          attrs: {
            "data-rellax-speed": "3",
            src: "https://s3.amazonaws.com/uifaces/faces/twitter/mlane/128.jpg",
            alt: ""
          }
        }),
        _c("img", {
          staticClass: "left-third-person img-raised rellax",
          attrs: {
            "data-rellax-speed": "2",
            src: "https://s3.amazonaws.com/uifaces/faces/twitter/jsa/128.jpg",
            alt: ""
          }
        }),
        _c("img", {
          staticClass: "left-fourth-person img-raised rellax",
          attrs: {
            "data-rellax-speed": "5",
            src: "https://s3.amazonaws.com/uifaces/faces/twitter/kerem/128.jpg",
            alt: ""
          }
        }),
        _c("img", {
          staticClass: "left-fifth-person img-raised rellax",
          attrs: {
            "data-rellax-speed": "7",
            src:
              "https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg",
            alt: ""
          }
        })
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-md-2" }, [
      _c("div", { staticClass: "testimonials-people" }, [
        _c("img", {
          staticClass: "right-first-person img-raised rellax",
          attrs: {
            "data-rellax-speed": "5",
            src:
              "https://s3.amazonaws.com/uifaces/faces/twitter/tonypeterson/128.jpg",
            alt: ""
          }
        }),
        _c("img", {
          staticClass: "right-second-person img-raised rellax",
          attrs: {
            "data-rellax-speed": "1",
            src:
              "https://s3.amazonaws.com/uifaces/faces/twitter/dancounsell/128.jpg",
            alt: ""
          }
        }),
        _c("img", {
          staticClass: "right-fourth-person img-raised rellax",
          attrs: {
            "data-rellax-speed": "7",
            src:
              "https://s3.amazonaws.com/uifaces/faces/twitter/mattsince87/128.jpg",
            alt: ""
          }
        }),
        _c("img", {
          staticClass: "right-fifth-person img-raised rellax",
          attrs: {
            "data-rellax-speed": "3",
            src: "https://s3.amazonaws.com/uifaces/faces/twitter/rem/128.jpg",
            alt: ""
          }
        }),
        _c("img", {
          staticClass: "right-sixth-person img-raised rellax",
          attrs: {
            "data-rellax-speed": "5",
            src:
              "https://s3.amazonaws.com/uifaces/faces/twitter/chadengle/128.jpg",
            alt: ""
          }
        })
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "col-md-8 ml-auto mr-auto text-center" }, [
      _c("h2", { staticClass: "title" }, [
        _vm._v("Ready to grab Now UI Kit PRO?")
      ])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("p", { staticClass: "description mb-5 text-center" }, [
      _vm._v("You have "),
      _c("b", [_vm._v("Free Unlimited Updates")]),
      _vm._v(" and "),
      _c("b", [_vm._v("Premium Support")]),
      _vm._v(" on each package. You also have "),
      _c("b", [_vm._v("30 days")]),
      _vm._v(" to request a refund if you're not happy with your purchase. "),
      _c("br"),
      _vm._v(" Read more about "),
      _c("b", [
        _c(
          "a",
          {
            attrs: {
              href: "https://www.creative-tim.com/license",
              target: "_blank"
            }
          },
          [_vm._v("licenses here")]
        )
      ]),
      _vm._v(". ")
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "text-center col-md-8 ml-auto mr-auto" }, [
      _c("h3", [_vm._v("Thank you for supporting us!")])
    ])
  },
  function() {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "text-center col-md-8 ml-auto mr-auto" }, [
      _c(
        "a",
        {
          staticClass:
            "btn btn-icon btn-lg btn-round btn-twitter twitter-sharrre sharrre",
          attrs: {
            href: "#pablo",
            rel: "tooltip",
            title: "",
            "data-original-title": "Tweet!"
          }
        },
        [_c("i", { staticClass: "fab fa-twitter" })]
      ),
      _c(
        "a",
        {
          staticClass:
            "btn btn-lg btn-round btn-icon btn-facebook facebook-sharrre sharrre",
          attrs: {
            href: "#pablo",
            rel: "tooltip",
            title: "",
            "data-original-title": "Share!"
          }
        },
        [_c("i", { staticClass: "fab fa-facebook-square" })]
      ),
      _c(
        "a",
        {
          staticClass:
            "btn btn-lg btn-round btn-icon btn-linkedin linkedin-sharrre sharrre",
          attrs: {
            href: "#pablo",
            rel: "tooltip",
            title: "",
            "data-original-title": "Share!"
          }
        },
        [_c("i", { staticClass: "fab fa-linkedin" })]
      ),
      _c(
        "a",
        {
          staticClass: "btn btn-lg btn-round btn-icon btn-github",
          attrs: {
            href: "https://github.com/creativetimofficial/vue-now-ui-kit",
            rel: "tooltip",
            title: "",
            "data-original-title": "Star on Github"
          }
        },
        [_c("i", { staticClass: "fab fa-github" })]
      )
    ])
  }
]
render._withStripped = true

export { render, staticRenderFns }"}]}